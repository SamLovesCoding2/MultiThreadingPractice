package com.company;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.concurrent.TimeoutException;

public class Main {
    public static void main(String[] args) throws InterruptedException {
         long[] numbers = {13000000,400000000,100000000};
         List<FactorialBig> tList = new ArrayList<>();
         for(int i = 0;i<numbers.length;i++)
         {
             tList.add(new FactorialBig(numbers[i]));
         }
         for(Thread t:tList)
         {
             //if we add all the threads to Daemon, then the program will end
             t.setDaemon(true);
             t.start();
         }
         for(Thread t:tList)// when using the join method
         {
             // we need to consider hoe long we are able to wait for the worker threads
             //to terminate the thread, we can set the time limit in the parameter
             t.join(1000);
         }
        for(int j = 0;j<numbers.length;j++)
        {
            FactorialBig f = (FactorialBig) tList.get(j);
            if(f.finished)
            {
                System.out.println("the thread:  " + f.getName() + " is finished " + "the answer is " + f.getResult());
            }else
            {
                System.out.println("the thread:  " + f.getName() + " is in progress");
            }
        }
    }
    public static class FactorialBig extends Thread
    {
        long input;
        private BigInteger result = BigInteger.ONE;
        private boolean finished;
        public FactorialBig(long input)
        {
            this.input = input;
        }

        @Override
        public void run() {
            result = calculation(input);
            this.finished = true;
        }

        public BigInteger calculation(long input)
        {
            BigInteger tempSum = BigInteger.ONE;
            for(long i = 1;i<=input;i++)
            {
                tempSum = tempSum.multiply(new BigInteger(Long.toString(i)));
            }
            return tempSum;
        }
        public boolean getFinished()
        {
            return finished;
        }
        public BigInteger getResult()
        {
            return result;
        }
    }
}
